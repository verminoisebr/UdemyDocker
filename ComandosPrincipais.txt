comandos principais

docker container run (sempre cria uma nova instancia)

#cria um container em 2 plano(daemon), nome 'ex-daemon-basic, porta de acesso 8080 e 80 interna
#pasta correspondente 'pasta atual = ex-volume'/html recebendo /usr/share/nginx/html
docker container run -d --name ex-daemon-basic -p 8080:80 -v $(pwd)/html:/usr/share/nginx/html nginx

docker container start 'nome/ID'
docker container restart
docker container stop

#3 comandos iguais. com a opção "-a" mostra os não ativos
docker container ls
docker container ps
docker container list

#acessando log
docker container logs 'nome'

#mostrando configurações
docker container inspect 'nome'

#executando um processo (container precisa estar ativo)
docker container exec 'nome' 'comando' (ex: uname -or)

#a sintaxe docker evolui para simplificar o entendimento, ex:
docker image ls (listar imagem)
docker container ls (listar container)
docker volume ls (listar volumes)
docker image rm (remover imagem)

#fazer a primeira build. criar arquivo Dockerfile na pasta em questao (primeira-build)
docker image build -t ex-simple-build .
#criando um container
docker container run -p 80:80 ex-simple-build

#build com argumentos
docker image build -t ex-build-arg .
#subiu de nivel agora. usando o bash -c pra poder executar varios comandos (pasta build-com-arg)
docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
#alterando a variavel dentro da imagem e regravando a mesma
docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .
#executando novamente pra confirmar alteração
docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
#fazendo consulta com inspect filtrando por 'maintainer'...
docker image inspect --format="{{index .Config.Labels \"maintainer\"}}" ex-build-arg

#build com copy
docker image build -t ex-build-copy .
#lembrando do Dockerfile + index.html na pasta "build-com-copy"
docker container run -p 80:80 ex-build-copy

#build dev python (faz referência da imagem dentro do docker file, que já baixa a imagem necessária)
docker image build -t ex-build-dev .
docker container run -it -v $(pwd):/app -p 80:8000 --name python-server ex-build-dev
#e agora criamos outro container pra acessar o log dentro deste que acabou de ser criado
docker container run --volumes-from=python-server debian cat /log/http-server.log




